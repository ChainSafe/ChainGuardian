import {GetBlock} from "./types";
import {base64ToHex} from "./utils";

/* eslint-disable camelcase */
/* eslint-disable @typescript-eslint/camelcase */

// TODO: after complete all mappings change return type "Block" to "Json"
export const mapProduceBlockResponseToStandardProduceBlockResponse = (data: GetBlock): Block => ({
    // TODO: get a way to get signature :man_shrugging:
    signature: "",
    message: {
        slot: data.slot,
        proposer_index: data.proposer_index,
        parent_root: base64ToHex(data.parent_root),
        state_root: base64ToHex(data.state_root),
        body: {
            randao_reveal: base64ToHex(data.body.randao_reveal),
            graffiti: base64ToHex(data.body.graffiti),
            eth1_data: {
                deposit_root: base64ToHex(data.body.eth1_data.deposit_root),
                deposit_count: data.body.eth1_data.deposit_count,
                block_hash: base64ToHex(data.body.eth1_data.block_hash),
            },
            // TODO: implement mapper
            proposer_slashings: [],
            // TODO: implement mapper
            attester_slashings: [],
            attestations: data.body.attestations.map((attestation) => ({
                aggregation_bits: base64ToHex(attestation.aggregation_bits),
                signature: base64ToHex(attestation.signature),
                data: {
                    slot: attestation.data.slot,
                    index: attestation.data.committee_index,
                    beacon_block_root: base64ToHex(attestation.data.beacon_block_root),
                    source: {
                        epoch: attestation.data.source.epoch,
                        root: base64ToHex(attestation.data.source.root),
                    },
                    target: {
                        epoch: attestation.data.target.epoch,
                        root: base64ToHex(attestation.data.target.root),
                    },
                },
            })),
            // TODO: implement mapper
            deposits: [],
            // TODO: implement mapper
            voluntary_exits: [],
        },
    },
});

// This "garbage" is just here to help me
// autogenerated from eth2 getBlock json

/* eslint-disable @typescript-eslint/interface-name-prefix */
export interface Block {
    message: Message;
    signature: string;
}
export interface Message {
    slot: string;
    proposer_index: string;
    parent_root: string;
    state_root: string;
    body: Body;
}
export interface Body {
    randao_reveal: string;
    eth1_data: Eth1Data;
    graffiti: string;
    proposer_slashings?: ProposerSlashingsEntity[] | null;
    attester_slashings?: AttesterSlashingsEntity[] | null;
    attestations?: AttestationsEntity[] | null;
    deposits?: DepositsEntity[] | null;
    voluntary_exits?: VoluntaryExitsEntity[] | null;
}
export interface Eth1Data {
    deposit_root: string;
    deposit_count: string;
    block_hash: string;
}
export interface ProposerSlashingsEntity {
    signed_header_1: SignedHeader1OrSignedHeader2;
    signed_header_2: SignedHeader1OrSignedHeader2;
}
export interface SignedHeader1OrSignedHeader2 {
    message: Message1;
    signature: string;
}
export interface Message1 {
    slot: string;
    proposer_index: string;
    parent_root: string;
    state_root: string;
    body_root: string;
}
export interface AttesterSlashingsEntity {
    attestation_1: Attestation1OrAttestation2;
    attestation_2: Attestation1OrAttestation2;
}
export interface Attestation1OrAttestation2 {
    attesting_indices?: string[] | null;
    signature: string;
    data: Data1;
}
export interface Data1 {
    slot: string;
    index: string;
    beacon_block_root: string;
    source: SourceOrTarget;
    target: SourceOrTarget;
}
export interface SourceOrTarget {
    epoch: string;
    root: string;
}
export interface AttestationsEntity {
    aggregation_bits: string;
    signature: string;
    data: Data1;
}
export interface DepositsEntity {
    proof?: string[] | null;
    data: Data2;
}
export interface Data2 {
    pubkey: string;
    withdrawal_credentials: string;
    amount: string;
    signature: string;
}
export interface VoluntaryExitsEntity {
    message: Message2;
    signature: string;
}
export interface Message2 {
    epoch: string;
    validator_index: string;
}
